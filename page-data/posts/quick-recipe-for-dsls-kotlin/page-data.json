{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/quick-recipe-for-dsls-kotlin","result":{"data":{"markdownRemark":{"id":"aa86db76-1c7e-52bf-8aa8-cfee9a51d732","html":"<p>A pretty cool feature in Kotlin is the ability to construct custom DSLs. And you need just four things in order to write them.</p>\n<ul>\n<li>Infix Notations</li>\n<li>Extension Methods</li>\n<li>Lambdas</li>\n<li>Lambda with Receiver</li>\n</ul>\n<p>Let’s go through these one by one.</p>\n<h2 id=\"infix-notation\"><a href=\"#infix-notation\" aria-label=\"infix notation permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Infix Notation</h2>\n<figure><blockquote>Remove brackets & dots!</blockquote></figure>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> Car <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">fun</span> <span class=\"token function\">drive</span><span class=\"token punctuation\">(</span>miles<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">val</span> car <span class=\"token operator\">=</span> <span class=\"token function\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ncar<span class=\"token punctuation\">.</span><span class=\"token function\">drive</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// normal stuff</span></code></pre></div>\n<p>Just add infix notation before method declaration for it to work</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> Car <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">infix</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">drive</span><span class=\"token punctuation\">(</span>miles<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">val</span> car <span class=\"token operator\">=</span> <span class=\"token function\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ncar drive <span class=\"token number\">10</span> <span class=\"token comment\">// no brackets! no dots!</span></code></pre></div>\n<h2 id=\"extension-methods\"><a href=\"#extension-methods\" aria-label=\"extension methods permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Extension Methods</h2>\n<figure><blockquote>Add new functions to any class without having to inherit!</blockquote></figure>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"Ahmed Riz\"</span>\nname<span class=\"token punctuation\">.</span><span class=\"token function\">shout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// won't compile as shout() is not part of String class</span></code></pre></div>\n<p>In order to make it a part of String class (without inheriting), create shout method prefixed with “String.”</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">shout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\<span class=\"token interpolation variable\">$this</span> !\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// this refers to the value of string itself</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">val</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"Ahmed Riz\"</span>\nname<span class=\"token punctuation\">.</span><span class=\"token function\">shout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// works! and prints out: Ahmed Riz !</span></code></pre></div>\n<p>Extension methods are project-scoped — you can access them anywhere inside the project.</p>\n<h2 id=\"lambdas\"><a href=\"#lambdas\" aria-label=\"lambdas permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Lambdas</h2>\n<figure><blockquote>Pass anonymous function literals (to higher order functions)!</blockquote></figure>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">// a higher order function</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> operation<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>Int<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">operation</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// when calling, we can pass in a lambda expression</span>\n<span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> value <span class=\"token operator\">-></span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// and because it's the last param, we can extract it out</span>\n<span class=\"token comment\">// just to clean things up even further</span>\n<span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> value <span class=\"token operator\">-></span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"lambda-with-receiver\"><a href=\"#lambda-with-receiver\" aria-label=\"lambda with receiver permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Lambda with Receiver</h2>\n<figure><blockquote>Pass anonymous function literals (to higher order functions), but with a receiver type!</blockquote></figure>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">// slight change to the previous higher order function</span>\n<span class=\"token comment\">// now instead of operation: (Int) -> Unit</span>\n<span class=\"token comment\">// we'll do operation: Int.() -> Unit</span>\n<span class=\"token comment\">// This makes Int the receiver type</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> operation<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  value<span class=\"token punctuation\">.</span><span class=\"token function\">operation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// usage now becomes</span>\n<span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// prints out: 10</span></code></pre></div>\n<h2 id=\"combining-these\"><a href=\"#combining-these\" aria-label=\"combining these permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Combining These!</h2>\n<p>Let’s now create a DSL of our own. Just to demonstrate</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> myProfile <span class=\"token operator\">=</span> <span class=\"token string\">\"Ahmed Rizwan\"</span> profile <span class=\"token punctuation\">{</span>\n  age <span class=\"token operator\">=</span> <span class=\"token number\">90</span>\n  phone <span class=\"token operator\">=</span> <span class=\"token string\">\"123 456 789\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Code in order to make it a valid DSL is as simple as this</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> <span class=\"token function\">Profile</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">val</span> name<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">var</span> age<span class=\"token operator\">:</span> Int<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">var</span> phone<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">infix</span> <span class=\"token keyword\">fun</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">profile</span><span class=\"token punctuation\">(</span>create<span class=\"token operator\">:</span> Profile<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Profile <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">val</span> profile <span class=\"token operator\">=</span> <span class=\"token function\">Profile</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n  profile<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> profile\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And that’s it!</p>\n<p>Although the DSL above might not be a very useful one in real world — but hopefully it gives you an idea of how we can utilize these different Kotlin features to create some custom DSLs of our own.</p>\n<p>Happy coding!</p>","fields":{"slug":"/posts/quick-recipe-for-dsls-kotlin","tagSlugs":["/tag/kotlin/","/tag/dsl/","/tag/quick-recipe/"]},"frontmatter":{"date":"2019-11-28T22:40:32.169Z","description":"A pretty cool feature in Kotlin is the ability to construct custom DSLs. And you need just four things in order to write them.","tags":["Kotlin","DSL","Quick Recipe"],"title":"Quick Recipe for creating DSLs in Kotlin","socialImage":"/media/image-0.jpg"}}},"pageContext":{"slug":"/posts/quick-recipe-for-dsls-kotlin"}}}